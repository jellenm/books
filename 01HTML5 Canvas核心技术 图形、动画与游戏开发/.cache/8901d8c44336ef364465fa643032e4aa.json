{"dependencies":[],"generated":{"js":"\"use strict\";\n\n/*\r\n * Copyright (C) 2012 David Geary. This code is from the book\r\n * Core HTML5 Canvas, published by Prentice-Hall in 2012.\r\n *\r\n * License:\r\n *\r\n * Permission is hereby granted, free of charge, to any person \r\n * obtaining a copy of this software and associated documentation files\r\n * (the \"Software\"), to deal in the Software without restriction,\r\n * including without limitation the rights to use, copy, modify, merge,\r\n * publish, distribute, sublicense, and/or sell copies of the Software,\r\n * and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * The Software may not be used to create training material of any sort,\r\n * including courses, books, instructional videos, presentations, etc.\r\n * without the express written consent of David Geary.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n*/\n\nvar canvas = document.getElementById('canvas'),\n    context = canvas.getContext('2d'),\n    linearRadio = document.getElementById('linearRadio'),\n    easeInRadio = document.getElementById('easeInRadio'),\n    easeOutRadio = document.getElementById('easeOutRadio'),\n    easeInOutRadio = document.getElementById('easeInOutRadio'),\n    animateButton = document.getElementById('animateButton'),\n    runnerCells = [{ left: 0, top: 0, width: 47, height: 64 }, { left: 55, top: 0, width: 44, height: 64 }, { left: 107, top: 0, width: 39, height: 64 }, { left: 152, top: 0, width: 46, height: 64 }, { left: 208, top: 0, width: 49, height: 64 }, { left: 265, top: 0, width: 46, height: 64 }, { left: 320, top: 0, width: 42, height: 64 }, { left: 380, top: 0, width: 35, height: 64 }, { left: 425, top: 0, width: 35, height: 64 }],\n    interval,\n    lastAdvance = 0.0,\n    SPRITE_LEFT = canvas.width - runnerCells[0].width,\n    SPRITE_TOP = 10,\n    PAGEFLIP_INTERVAL = 100,\n    ANIMATION_DURATION = 3900,\n    animationTimer = new AnimationTimer(ANIMATION_DURATION, AnimationTimer.makeLinear(1)),\n    LEFT = 1.5,\n    RIGHT = canvas.width - runnerCells[0].width,\n    BASELINE = canvas.height - 9.5,\n    TICK_HEIGHT = 8.5,\n    WIDTH = RIGHT - LEFT,\n    runInPlace = {\n  execute: function execute(sprite, context, time) {\n    var elapsed = animationTimer.getElapsedTime();\n    if (lastAdvance === 0) {\n      // skip first time\n      lastAdvance = elapsed;\n    } else if (lastAdvance !== 0 && elapsed - lastAdvance > PAGEFLIP_INTERVAL) {\n      sprite.painter.advance();\n      lastAdvance = elapsed;\n    }\n  }\n},\n    moveRightToLeft = {\n  lastMove: 0,\n  reset: function reset() {\n    this.lastMove = 0;\n  },\n\n  execute: function execute(sprite, context, time) {\n    var elapsed = animationTimer.getElapsedTime(),\n        advanceElapsed = elapsed - this.lastMove;\n\n    if (this.lastMove === 0) {\n      // skip first time\n      this.lastMove = elapsed;\n    } else {\n      sprite.left -= advanceElapsed / 1000 * sprite.velocityX;\n      this.lastMove = elapsed;\n    }\n  }\n},\n    sprite = new Sprite('runner', new SpriteSheetPainter(runnerCells), [moveRightToLeft, runInPlace]);\nwindow.spritesheet = new Image();\n\n// Functions.....................................................\n\nfunction endAnimation() {\n  animateButton.value = 'Animate';\n  animateButton.style.display = 'inline';\n  animationTimer.stop();\n\n  lastAdvance = 0;\n  sprite.painter.cellIndex = 0;\n  sprite.left = SPRITE_LEFT;\n  animationTimer.reset();\n  moveRightToLeft.reset();\n}\n\nfunction startAnimation() {\n  animationTimer.start();\n  animateButton.style.display = 'none';\n  window.requestNextAnimationFrame(animate);\n}\n\nfunction drawAxis() {\n\n  context.lineWidth = 0.5;\n  context.strokeStyle = 'cornflowerblue';\n\n  context.moveTo(LEFT, BASELINE);\n  context.lineTo(RIGHT, BASELINE);\n  context.stroke();\n\n  for (var i = 0; i <= WIDTH; i += WIDTH / 20) {\n    context.beginPath();\n    context.moveTo(LEFT + i, BASELINE - TICK_HEIGHT / 2);\n    context.lineTo(LEFT + i, BASELINE + TICK_HEIGHT / 2);\n    context.stroke();\n  }\n\n  for (i = 0; i < WIDTH; i += WIDTH / 4) {\n    context.beginPath();\n    context.moveTo(LEFT + i, BASELINE - TICK_HEIGHT);\n    context.lineTo(LEFT + i, BASELINE + TICK_HEIGHT);\n    context.stroke();\n  }\n\n  context.beginPath();\n  context.moveTo(RIGHT, BASELINE - TICK_HEIGHT);\n  context.lineTo(RIGHT, BASELINE + TICK_HEIGHT);\n  context.stroke();\n}\n\nfunction drawTimeline() {\n  var realElapsed = animationTimer.getRealElapsedTime(),\n      realPercent = realElapsed / ANIMATION_DURATION;\n\n  context.lineWidth = 0.5;\n  context.strokeStyle = 'rgba(0, 0, 255, 0.5)';\n\n  context.beginPath();\n\n  context.moveTo(WIDTH - realPercent * WIDTH, 0);\n  context.lineTo(WIDTH - realPercent * WIDTH, canvas.height);\n  context.stroke();\n}\n\n// Event handlers................................................\n\nanimateButton.onclick = function (e) {\n  if (animateButton.value === 'Animate') startAnimation();else endAnimation();\n};\n\nlinearRadio.onclick = function (e) {\n  animationTimer.timeWarp = AnimationTimer.makeLinear(1);\n};\n\neaseInRadio.onclick = function (e) {\n  animationTimer.timeWarp = AnimationTimer.makeEaseIn(1);\n};\n\neaseOutRadio.onclick = function (e) {\n  animationTimer.timeWarp = AnimationTimer.makeEaseOut(1);\n};\n\neaseInOutRadio.onclick = function (e) {\n  animationTimer.timeWarp = AnimationTimer.makeEaseInOut();\n};\n\n// Animation.....................................................\n\nfunction animate(time) {\n  if (animationTimer.isRunning()) {\n    var elapsed = animationTimer.getElapsedTime();\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    sprite.update(context, time);\n    sprite.paint(context);\n\n    drawTimeline();\n    drawAxis();\n\n    if (animationTimer.isOver()) {\n      endAnimation();\n    }\n    window.requestNextAnimationFrame(animate);\n  }\n}\n\n// Initialization................................................\n\nspritesheet.src = './image/running-sprite-sheet.png';\nsprite.left = SPRITE_LEFT;\nsprite.top = SPRITE_TOP;\nsprite.velocityX = 100; // pixels/second\ndrawAxis();\nspritesheet.onload = function () {\n  sprite.paint(context);\n};"},"hash":"5ad9214e7ad47eb9b3385d7b594e21d7"}