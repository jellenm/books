{"dependencies":[],"generated":{"js":"\"use strict\";\n\n/*\n * Copyright (C) 2012 David Geary. This code is from the book\n * Core HTML5 Canvas, published by Prentice-Hall in 2012.\n *\n * License:\n *\n * Permission is hereby granted, free of charge, to any person \n * obtaining a copy of this software and associated documentation files\n * (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the Software,\n * and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * The Software may not be used to create training material of any sort,\n * including courses, books, instructional videos, presentations, etc.\n * without the express written consent of David Geary.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// AnimationTimer..................................................................\n//\n// An animation runs for a duration, in milliseconds. It's up to you,\n// however, to start and stop the animation -- animations do not stop\n// automatically. You can check to see if an animation is over with the\n// isOver() method, and you can see if an animation is running with\n// isRunning(). Note that animations can be over, but still running.\n//\n// You can also supply an optional timeWarp function that warps the percent\n// completed for the animation. That warping lets you do easily incorporate\n// non-linear motion, such as: ease-in, ease-out, elastic, etc.\n\nwindow.AnimationTimer = function (duration, timeWarp) {\n  this.timeWarp = timeWarp;\n\n  if (duration !== undefined) this.duration = duration;else this.duration = 1000;\n\n  this.stopwatch = new Stopwatch();\n};\n\nAnimationTimer.prototype = {\n  start: function start() {\n    this.stopwatch.start();\n  },\n\n  stop: function stop() {\n    this.stopwatch.stop();\n  },\n\n  getRealElapsedTime: function getRealElapsedTime() {\n    return this.stopwatch.getElapsedTime();\n  },\n\n  getElapsedTime: function getElapsedTime() {\n    var elapsedTime = this.stopwatch.getElapsedTime(),\n        percentComplete = elapsedTime / this.duration;\n\n    if (!this.stopwatch.running) return undefined;\n    if (this.timeWarp == undefined) return elapsedTime;\n\n    return elapsedTime * (this.timeWarp(percentComplete) / percentComplete);\n  },\n\n  isRunning: function isRunning() {\n    return this.stopwatch.running;\n  },\n\n  isOver: function isOver() {\n    return this.stopwatch.getElapsedTime() > this.duration;\n  },\n\n  reset: function reset() {\n    this.stopwatch.reset();\n  }\n};\n\nAnimationTimer.makeEaseOut = function (strength) {\n  return function (percentComplete) {\n    return 1 - Math.pow(1 - percentComplete, strength * 2);\n  };\n};\n\nAnimationTimer.makeEaseIn = function (strength) {\n  return function (percentComplete) {\n    return Math.pow(percentComplete, strength * 2);\n  };\n};\n\nAnimationTimer.makeEaseInOut = function () {\n  return function (percentComplete) {\n    return percentComplete - Math.sin(percentComplete * 2 * Math.PI) / (2 * Math.PI);\n  };\n};\n\nAnimationTimer.makeElastic = function (passes) {\n  passes = passes || 3;\n  return function (percentComplete) {\n    return (1 - Math.cos(percentComplete * Math.PI * passes)) * (1 - percentComplete) + percentComplete;\n  };\n};\n\nAnimationTimer.makeBounce = function (bounces) {\n  var fn = AnimationTimer.makeElastic(bounces);\n  return function (percentComplete) {\n    percentComplete = fn(percentComplete);\n    return percentComplete <= 1 ? percentComplete : 2 - percentComplete;\n  };\n};\n\nAnimationTimer.makeLinear = function () {\n  return function (percentComplete) {\n    return percentComplete;\n  };\n};"},"hash":"6ba73e328d22b8f388879c9bba8cca79"}